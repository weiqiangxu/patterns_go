示例：


点一杯咖啡：

大 中 小

加糖  加牛奶

下订单


实现的效果就是：

获取一个下订单的对象，再往里面添加大杯对象，再添加加糖对象

在一个主体之上可以扩展模块

而模块的实现可以分离

具备了良好的扩展性



“系统的其他部分只要调用那套抽取出来的接口就可以完成所有的功能。这样来看，系统的其他部分是不依赖具体的平台的，也就具有了良好的扩展性”

从Java的代码而言：



JDBC其实只是Sun定义出来的一套规范 - 其他的数据库厂商则可以分别提供自己的jdbc实现来支持自家的数据库 - 而JDBC的扩展也是应用了 桥接模式


使用JDBC的时候其实可以完全不care用的是Mysql还是oracle还是mongo的各自实现，反正都是 save\delete\add （对抽象隐藏实现部分）

用的时候也不会因为mongo就需要将save编程 saveMongo(), 方法名也是一样的 (避免抽象和实现的强耦合)

就算mongo重新定义了新的查询语言导致mongo-JDBC实现需要改代码也不会影响抽象的部分 - select还是一样的写法 (抽象的部分在开发时不会受到实现部分变动的影响)


★ 类的某部分功能会剧烈变化时，把抽象和实现分离，则抽象的部分在开发时不会受到实现部分变动的影响
★ 想要使抽象和实现部分分别开发，互不依赖时
★ 想要避免抽象和实现的强耦合，使实现部分可以在运行时被动态的切换
★ 想要对抽象隐藏实现部分或者对实现隐藏抽象部分时（外包时可用）



桥接模式主要是：集成各个功能的整体，其中的各个功能可以非常顺畅的组成一个整体，并且各个功能又可以完全不会互相影响，各个功能的实现也可以动态变化～


就像一辆汽车：动力系统、外形、方向盘、中控系统、制动系统等等，桥接模式的思想让他们模块解耦又可以整体聚合


糟糕的实现就是：

小轿车  -   一份代码

公交车  -  一份代码

跑车 - 一份代码

...


而是拆离车的基础属性类，再各自实现跑车、小轿车的动力之类，组装为各种车型




一句话设计模式：


当需要实现一个功能，这个功能有很多子功能，并且这个子功能动态的、可扩展的，这就是适用桥接模式

就像是 elastic客户端的创建，那么有的人实现关闭ssl有些人实现集群、有些人实现添加账户密码auth、有些人实现请求模式的更换

所有的配置加起来就是一个elastic client

那么这里适用桥接模式


将所有的配置抽象化

将client的实现与多个配置模块接口

elastic.New(setAuth,setMethod,setSSL)

最终参数的option都是同一个抽象的不同实现











